{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport CustomButton from \"../components/CustomButton\";\nimport CustomInput from \"../components/CustomInput\";\nimport theme from \"../Theme\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTranslation } from 'react-i18next';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Message = function Message(_ref) {\n  var senderName = _ref.senderName,\n      content = _ref.content,\n      isSenderMe = _ref.isSenderMe;\n  return _jsxs(View, {\n    style: [messageStyles.container, isSenderMe ? {\n      alignSelf: 'flex-end',\n      marginRight: 10\n    } : {}],\n    children: [!isSenderMe && _jsx(Ionicons, {\n      name: \"person-circle\",\n      size: 50\n    }), _jsxs(View, {\n      style: [messageStyles.messageTextContainer, isSenderMe ? {\n        backgroundColor: 'gray'\n      } : {}],\n      children: [_jsx(Text, {\n        style: messageStyles.senderName,\n        children: senderName\n      }), _jsx(Text, {\n        children: content\n      })]\n    })]\n  });\n};\n\nvar messageStyles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 10,\n    marginLeft: 10\n  },\n  senderName: {\n    color: theme.colors.gray\n  },\n  messageTextContainer: {\n    marginLeft: 15,\n    padding: 10,\n    backgroundColor: theme.colors.white,\n    borderRadius: 2,\n    width: '80%'\n  }\n});\n\nvar MessageRenderItem = function MessageRenderItem(_ref2) {\n  var item = _ref2.item;\n  return _jsx(Message, {\n    senderName: item.senderName,\n    content: item.content,\n    isSenderMe: item.isSenderMe\n  });\n};\n\nvar ChatScreen = function ChatScreen() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var defaultMessages = [{\n    id: 1,\n    senderName: 'David',\n    content: t('autoBotMessage'),\n    isSenderMe: false\n  }];\n\n  var _useState = useState(defaultMessages),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messageTextBox = _useState4[0],\n      setMessageTextBox = _useState4[1];\n\n  var idCounter = useRef(2);\n\n  var onSendPress = function onSendPress() {\n    var newArray = [].concat(_toConsumableArray(messages), [{\n      id: idCounter.current,\n      senderName: 'Carlos Roque',\n      content: messageTextBox,\n      isSenderMe: true\n    }]);\n    idCounter.current = idCounter.current + 1;\n    setMessages(newArray);\n    setMessageTextBox('');\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      style: styles.messagesContainer,\n      data: messages,\n      renderItem: MessageRenderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    }), _jsxs(View, {\n      style: styles.bottomRow,\n      children: [_jsx(View, {\n        style: styles.messageInputBox,\n        children: _jsx(CustomInput, {\n          placeholder: t('messageInputPlaceholder'),\n          value: messageTextBox,\n          setValue: setMessageTextBox,\n          padding: 5\n        })\n      }), _jsx(View, {\n        style: styles.sendButton,\n        children: _jsx(CustomButton, {\n          text: t('send'),\n          onPress: onSendPress,\n          padding: 15\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  messagesContainer: {\n    backgroundColor: theme.colors.bgColor\n  },\n  bottomRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingTop: 5,\n    paddingBottom: 3,\n    backgroundColor: theme.colors.white\n  },\n  messageInputBox: {\n    flex: 3,\n    paddingLeft: 10\n  },\n  sendButton: {\n    flex: 1,\n    marginHorizontal: 5\n  }\n});\nexport default ChatScreen;","map":{"version":3,"names":["React","useState","useRef","CustomButton","CustomInput","theme","Ionicons","useTranslation","Message","senderName","content","isSenderMe","messageStyles","container","alignSelf","marginRight","messageTextContainer","backgroundColor","StyleSheet","create","flexDirection","marginTop","marginLeft","color","colors","gray","padding","white","borderRadius","width","MessageRenderItem","item","ChatScreen","t","i18n","defaultMessages","id","messages","setMessages","messageTextBox","setMessageTextBox","idCounter","onSendPress","newArray","current","styles","messagesContainer","bottomRow","messageInputBox","sendButton","flex","bgColor","justifyContent","paddingTop","paddingBottom","paddingLeft","marginHorizontal"],"sources":["C:/Users/VALDEZ GAMING/Documents/GitHub/Mech-Workshop-Service-Track/MWST-Frontend/Service/src/screens/ChatScreen.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Text, View, ScrollView, StyleSheet, FlatList } from 'react-native';\r\nimport CustomButton from '../components/CustomButton';\r\nimport CustomInput from '../components/CustomInput';\r\nimport theme from '../Theme';\r\nimport { Ionicons } from '@expo/vector-icons'\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst Message = ({senderName, content, isSenderMe}) => {\r\n\treturn (\r\n\t\t<View style={[\r\n\t\t\tmessageStyles.container,\r\n\t\t\tisSenderMe ? { alignSelf: 'flex-end', marginRight: 10, } : {},\r\n\t\t]}>\r\n\t\t\t{ !isSenderMe && <Ionicons name='person-circle' size={50}/> }\r\n\t\t\t<View style={[\r\n\t\t\t\tmessageStyles.messageTextContainer,\r\n\t\t\t    isSenderMe ? { backgroundColor: 'gray' } : {},\r\n\t\t\t]}>\r\n\t\t\t\t<Text style={messageStyles.senderName}>\r\n\t\t\t\t\t{senderName}\r\n\t\t\t\t</Text>\r\n\t\t\t\t<Text>\r\n\t\t\t\t\t{content}\r\n\t\t\t\t</Text>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t)\r\n}\r\n\r\nconst messageStyles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflexDirection: 'row',\r\n\t\tmarginTop: 10,\r\n\t\tmarginLeft: 10,\r\n\t},\r\n\tsenderName: {\r\n\t\tcolor: theme.colors.gray\r\n\t},\r\n\tmessageTextContainer: {\r\n\t\tmarginLeft: 15,\r\n\t\tpadding: 10,\r\n\t\tbackgroundColor: theme.colors.white,\r\n\t\tborderRadius: 2,\r\n\t\twidth: '80%',\r\n\t},\r\n})\r\n\r\nconst MessageRenderItem = ({item}) => {\r\n\treturn (\r\n\t\t<Message senderName={item.senderName} content={item.content} isSenderMe={item.isSenderMe}/>\r\n\t)\r\n}\r\n\r\nconst ChatScreen = () => {\r\n\tconst { t, i18n } = useTranslation()\r\n\r\n\tconst defaultMessages = [\r\n\t\t{ id: 1, senderName: 'David', content: t('autoBotMessage'), isSenderMe: false }\r\n\t]\r\n\r\n\tconst [ messages, setMessages ] = useState(defaultMessages)\r\n\tconst [ messageTextBox, setMessageTextBox ] = useState('')\r\n\tconst idCounter = useRef(2)\r\n\r\n\tconst onSendPress = () => {\r\n\t\tconst newArray = [...messages, {id: idCounter.current, senderName: 'Carlos Roque', content: messageTextBox, isSenderMe: true}]\r\n\t\tidCounter.current = idCounter.current + 1\r\n\t\tsetMessages(newArray)\r\n\t\tsetMessageTextBox('')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={styles.container}>\r\n\t\t\t<FlatList\r\n\t\t\t\tstyle={styles.messagesContainer} \r\n\t\t\t\tdata={messages}\r\n\t\t\t\trenderItem={MessageRenderItem}\r\n\t\t\t\tkeyExtractor={item => item.id}\r\n\t\t\t/>\r\n\t\t\t<View style={styles.bottomRow}>\r\n\t\t\t\t<View style={styles.messageInputBox}>\r\n\t\t\t\t\t<CustomInput placeholder={t('messageInputPlaceholder')} \r\n\t\t\t\t\t\tvalue={messageTextBox} setValue={setMessageTextBox} padding={5}/>\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={styles.sendButton}>\r\n\t\t\t\t\t<CustomButton text={t('send')} onPress={onSendPress} padding={15} />\r\n\t\t\t\t</View>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t)\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t},\r\n\tmessagesContainer: {\r\n\t\tbackgroundColor: theme.colors.bgColor,\r\n\t},\r\n\tbottomRow: {\r\n\t\tflexDirection: 'row',\r\n\t\tjustifyContent: 'space-around',\r\n\t\tpaddingTop: 5,\r\n\t\tpaddingBottom: 3,\r\n\t\tbackgroundColor: theme.colors.white\r\n\t},\r\n\tmessageInputBox: {\r\n\t\tflex: 3,\r\n\t\tpaddingLeft: 10,\r\n\t},\r\n\tsendButton: {\r\n\t\tflex: 1,\r\n\t\tmarginHorizontal: 5,\r\n\t}\r\n})\r\n\r\nexport default ChatScreen"],"mappings":"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"},"metadata":{},"sourceType":"module"}